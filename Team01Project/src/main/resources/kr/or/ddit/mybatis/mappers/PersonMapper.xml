<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.yguniv.person.dao.PersonMapper">
<sql id="searchFrag">
   <where>
   		PERSON_YN='N'
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
            <choose>
                <when test="simpleCondition.searchType eq 'title'">
                    AND INSTR(NM, #{simpleCondition.searchWord}) > 0
                </when>
                <when test="simpleCondition.searchType eq 'personType'">
                    <choose>
                        <when test="simpleCondition.searchWord eq '학생'">
                            AND SUBSTR(ID, 5, 1) = '1'
                        </when>
                        <when test="simpleCondition.searchWord eq '교직원'">
                           AND SUBSTR(ID, 5, 1) = '2'
                        </when>
                        <when test="simpleCondition.searchWord eq '교수'">
                           AND SUBSTR(ID, 5, 1) = '3'
                        </when>
                        <otherwise>
                           AND 1=1
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    AND (INSTR(NM, #{simpleCondition.searchWord}) > 0
                    OR INSTR(ID, #{simpleCondition.searchWord}) > 0)
                 
                </otherwise>
            </choose>
        </if>
    </where>
</sql>

<sql id="searchFragS">
    <where>
        A.PERSON_YN = 'N'
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
            <choose>
                <when test="simpleCondition.searchType eq 'title'">
                    AND INSTR(A.NM, #{simpleCondition.searchWord}) > 0
                </when>
                <when test="simpleCondition.searchType eq 'personType'">
                    AND C.ROLE_DESC = #{simpleCondition.searchWord}
                </when>
                <otherwise>
                    AND (INSTR(A.NM, #{simpleCondition.searchWord}) > 0
                    OR INSTR(A.ID, #{simpleCondition.searchWord}) > 0)
                </otherwise>
            </choose>
        </if>
    </where>
</sql>

<insert id="insertPerson" parameterType="PersonVO">
    <!-- Person 삽입 -->
    INSERT INTO PERSON(
        ID,
        PSWD,
        NM,
        BRDT,
        SEXDSTN_CD,
        ZIP,
        RDNMADR,
        DADDR,
        MBTLNUM,
        EML,
        EML_RCPTN_AGRE_YN,
        SMS_RCPTN_AGRE_YN,
        CRTFC_MN_CD,
        LAST_CONECT_DE,           
        PSWD_FAILR_CO,
        PROFL_PHOTO,
        PERSON_YN
    ) VALUES (
        #{id, jdbcType=VARCHAR}
		,REPLACE(#{brdt, jdbcType=CHAR}, '-', '') -- '-' 제거하여 19970201 형식으로 설정
        ,#{nm, jdbcType=VARCHAR}
        ,#{brdt, jdbcType=CHAR}
        ,#{sexdstnCd, jdbcType=CHAR}
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,TO_CHAR(SYSDATE, 'YYYYMMDD')
        ,'0'
        ,NULL
        ,'N'
    )

</insert>

<insert id="insertPersonRole">
INSERT INTO person_role (
    id,
    role_id
) VALUES (
    #{id},
    #{roleId}
)
</insert>

<delete id="deletePersonRole">

DELETE FROM person_role
WHERE
        id = #{id}
</delete>

<update id="updatePersonRole" >
INSERT INTO person_role (
    id,
    role_id
) VALUES (
    #{id},
    #{roleId}
)
</update>

<insert id="insertStudent" parameterType="StudentVO">
    INSERT INTO STUDENT (STU_ID, GRADE_CD, STRE_CATE_CD, DEPT_CD, PROFE_ID, DORMANT_DATE)
    VALUES (
         #{stuId, jdbcType=VARCHAR}
        ,#{gradeCd, jdbcType=VARCHAR}
        ,#{streCateCd, jdbcType=VARCHAR}
        ,#{deptCd, jdbcType=VARCHAR}
        ,(SELECT PROFE_ID 
          FROM (
              SELECT PROFE_ID
              FROM PROFESSOR 
              WHERE DEPT_NO = #{deptCd, jdbcType=VARCHAR}
              ORDER BY DBMS_RANDOM.VALUE
          )
          WHERE ROWNUM = 1)
        ,NULL
    )
</insert>

<select id="selectRandomProfeId" resultType="String">
	SELECT PROFE_ID 
FROM (
    SELECT PROFE_ID, ROW_NUMBER() OVER (ORDER BY DBMS_RANDOM.VALUE) AS RN
    FROM PROFESSOR 
    WHERE DEPT_NO = #{deptNo, jdbcType=VARCHAR}
)
WHERE RN = 1
	
</select>



<insert id="insertEmployee" parameterType="EmployeeVO">
	INSERT INTO EMPLOYEE(
		EMP_ID,
		EMP_DEPT,
		EMP_JBGD
	)
	VALUES(
		#{empId, jdbcType=VARCHAR}, 
		#{empDept, jdbcType=VARCHAR},
		#{empJbgd, jdbcType=VARCHAR}
	)
</insert>
	
<insert id="insertProfessor" parameterType="ProfessorVO">
    INSERT INTO PROFESSOR (
        PROFE_ID, 
        DEPT_NO, 
        PROFE_TYPE
    )
    VALUES (
        #{profeId, jdbcType=VARCHAR},
        #{deptNo, jdbcType=VARCHAR},
        #{profeType, jdbcType=VARCHAR}
    )
</insert>

<select id="checkedId" parameterType="String" resultType="Integer">
    SELECT COUNT(*)
    FROM person
    WHERE id = #{id}
</select>

	
<!-- 	<insert id="insertPerson" parameterType="PersonVO"> -->
<!-- 	INSERT INTO PERSON( -->
<!-- 		 ID -->
<!-- 		 ,PSWD -->
<!-- 		 ,NM -->
<!-- 		 ,BRDT -->
<!-- 		 ,SEXDSTN_CD -->
<!-- 		 ,ZIP -->
<!-- 		 ,RDNMADR -->
<!-- 		 ,DADDR -->
<!-- 		 ,MBTLNUM -->
<!-- 		 ,EML -->
<!-- 		 ,EML_RCPTN_AGRE_YN -->
<!-- 		 ,SMS_RCPTN_AGRE_YN -->
<!-- 		 ,CRTFC_MN_CD -->
<!-- 		 ,LAST_CONECT_DE -->
<!-- 		 ,PSWD_FAILR_CO -->
<!-- 		 ,PROFL_PHOTO -->
<!-- 		 ,PERSON_YN -->
		
<!-- 		) -->
<!-- VALUES( -->
<!-- 		 #{id, jdbcType=VARCHAR} -->
<!-- 		, #{pswd, jdbcType=VARCHAR} -->
<!-- 		, #{nm, jdbcType=VARCHAR} -->
<!-- 		, #{brdt, jdbcType=CHAR} -->
<!-- 		, #{sexdstnCd, jdbcType=CHAR} -->
<!-- 		, #{zip, jdbcType=CHAR} -->
<!-- 		, #{rdnmadr, jdbcType=VARCHAR} -->
<!-- 		, #{daddr, jdbcType=VARCHAR} -->
<!-- 		, #{mbtlnum, jdbcType=VARCHAR} -->
<!-- 		, #{eml, jdbcType=VARCHAR} -->
<!-- 		, #{emlRcptnAgreYn, jdbcType=CHAR} -->
<!-- 		, #{smsRcptnAgreYn, jdbcType=CHAR} -->
<!-- 		, #{crtfcMnCd, jdbcType=CHAR} -->
<!-- 		, (SELECT TO_DATE(SYSDATE, 'YYYY-MM-DD') FROM DUAL) -->
<!-- 		, '0' -->
<!-- 		, #{proflPhoto, jdbcType=BLOB} -->
<!-- 		,'N' -->
<!-- 		) -->
<!-- 	</insert> -->

<resultMap type="PersonVO" id="person" autoMapping="true">
	<discriminator javaType="String" column="PERSON_TYPE">
		<case value="STUDENT" resultType="StudentVO"/>
		<case value="PROFESSOR" resultType="ProfessorVO"/>
		<case value="EMPLOYEE" resultType="EmployeeVO"/>
		<case value="ADMIN" resultType="AdminVO"/>
	</discriminator>
</resultMap>

	<select id="selectPerson" resultMap="person">
	    SELECT 
	        ID,
	        NM,
	        BRDT,
	        SEXDSTN_CD,
	        ZIP,
	        RDNMADR,
	        DADDR,
	        MBTLNUM,
	        EML,
	        EML_RCPTN_AGRE_YN,
	        SMS_RCPTN_AGRE_YN,
	        CRTFC_MN_CD,
	        LAST_CONECT_DE,
	        PSWD_FAILR_CO,
	        PROFL_PHOTO,
	        PERSON_YN,
	        CASE 
	            WHEN S.STU_ID IS NOT NULL THEN '학생'
	            WHEN E.EMP_ID IS NOT NULL THEN '교직원'
	            WHEN F.PROFE_ID IS NOT NULL THEN '교수'
	            ELSE '교직원'
	        END AS PERSON_TYPE
	        , S.GRADE_CD, S.STRE_CATE_CD, S.DEPT_CD, S.PROFE_ID, S.DORMANT_DATE
	        , F.DEPT_NO, F.PROFE_TYPE
	        , E.EMP_DEPT, E.EMP_JBGD
	    FROM PERSON P
	    LEFT OUTER JOIN STUDENT S ON(P.ID = S.STU_ID)
	    LEFT OUTER JOIN PROFESSOR F ON(P.ID = F.PROFE_ID)
	    LEFT OUTER JOIN EMPLOYEE E ON(P.ID = E.EMP_ID)
	    WHERE ID = #{id, jdbcType=VARCHAR}
	</select>

<select id="selectTotalRecord" resultType="int">
		SELECT COUNT(*)
		FROM PERSON
	<include refid="searchFrag" />
</select>


<resultMap type="PersonVO" id="personResultMap">
    <id property="id" column="ID"/>
    <result property="nm" column="NM"/>
    <result property="brdt" column="BRDT"/>
    <result property="sexdstnCd" column="SEXDSTN_CD"/>
    <result property="zip" column="ZIP"/>
    <result property="rdnmadr" column="RDNMADR"/>
    <result property="daddr" column="DADDR"/>
    <result property="mbtlnum" column="MBTLNUM"/>
    <result property="eml" column="EML"/>
    <result property="emlRcptnAgreYn" column="EML_RCPTN_AGRE_YN"/>
    <result property="smsRcptnAgreYn" column="SMS_RCPTN_AGRE_YN"/>
    <result property="crtfcMnCd" column="CRTFC_MN_CD"/>
    <result property="lastConectDe" column="LAST_CONECT_DE"/>
    <result property="pswdFailrCo" column="PSWD_FAILR_CO"/>
    <result property="proflPhoto" column="PROFL_PHOTO"/>
    <result property="personYn" column="PERSON_YN"/>
    <collection property="personType" ofType="string">
   	 	<result column="personType"/>
	</collection>
</resultMap>

<select id="selectPersonList" resultMap="personResultMap">
    SELECT B.*
    FROM (
        SELECT ROWNUM RNUM, A.*
        FROM (
            SELECT 
                A.ID,
                A.NM,
                A.BRDT,
                A.SEXDSTN_CD,
                A.ZIP,
                A.RDNMADR,
                A.DADDR,
                A.MBTLNUM,
                A.EML,
                A.EML_RCPTN_AGRE_YN,
                A.SMS_RCPTN_AGRE_YN,
                A.CRTFC_MN_CD,
                A.LAST_CONECT_DE,
                A.PSWD_FAILR_CO,
                A.PROFL_PHOTO,
                A.PERSON_YN,
                C.ROLE_DESC AS personType
            FROM PERSON A 
            INNER JOIN PERSON_ROLE B ON A.ID = B.ID
            INNER JOIN ROLE C ON B.ROLE_ID = C.ROLE_ID
            <include refid="searchFragS" />
            ORDER BY A.ROWID DESC
        ) A
    ) B
    <![CDATA[
    WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
    ]]>
</select>



	
<update id="updatePerson" parameterType="PersonVO">

	UPDATE PERSON
		SET MBTLNUM = #{mbtlnum, jdbcType=VARCHAR}
		,EML = #{eml, jdbcType=VARCHAR}
	WHERE ID= #{id, jdbcType=VARCHAR}
    
    
</update>


<update id="updatePw" parameterType="String">
    UPDATE PERSON
    SET PSWD = REPLACE(BRDT, '-', '') 
    WHERE ID = #{id, jdbcType=VARCHAR}
</update>



<update id="deletePerson" parameterType="PersonVO">
	UPDATE PERSON 
		SET PERSON_YN ='Y'
	WHERE ID=#{id, jdbcType=VARCHAR}
</update>




<select id="selectProfessorDetail" resultType="ProfessorVO">
   SELECT 
       PROFE_ID,
       DEPT_NO,
       PROFE_TYPE
   FROM PROFESSOR
   WHERE ID = #{id}
</select>

<select id="selectUserTypeStatistics" resultType="map">
    SELECT
        CASE
            WHEN SUBSTR(ID, 1, 5) = '20241' THEN '학생'
            WHEN SUBSTR(ID, 1, 5) = '20242' THEN '교직원'
            WHEN SUBSTR(ID, 1, 5) = '20243' THEN '교수'
            WHEN SUBSTR(ID, 1, 5) = '20244' THEN '관리자'
        END AS userType,
        COUNT(*) AS count
    FROM PERSON
    GROUP BY SUBSTR(ID, 1, 5)
</select>

<select id="countGirlNBoy" resultType="PersonVO">
SELECT *FROM PERSON 
WHERE SEXDSTN_CD =#{sexdstnCd } 



</select>

<select id="getGender" resultType="map">
 SELECT SEXDSTN_CD, COUNT(*) AS count
    FROM PERSON
    GROUP BY SEXDSTN_CD

</select>



</mapper>